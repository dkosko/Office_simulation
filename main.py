from config import WORKING_TIME, ISSUE_DIFFICALTY_RANGE, COME_IN_TIME_RANGE, ISSUE_TYPE_RANGE
from random import randint, choice
def random_queue(T, diff_range, dt_range, type_range):
    queue = []
    sum_dt = 0
    num = 0
    while sum_dt < T:
        diff = randint(diff_range[0], diff_range[1])
        dt = randint(dt_range[0], dt_range[1])
        type = choice(type_range)
        sum_dt += dt
        num += 1
        queue.append([num, dt, diff, type, 0]) # klient jest reprezentowany listą (diff, dt), gdzie diff - czas potrzebny do załatwienia sprawy,
                                # dt - czas po którym klient wchodzi do urzędu po poprzednim kliencie
                                # type - typ sprawy
    return queue


def seperate_by_type(queue):
    queue_a, queue_b, queue_c = [], [], []
    for i in range(len(queue)):
        if queue[i][3] == 'a':
            queue_a.append(queue[i])
        elif queue[i][3] == 'b':
            queue_b.append(queue[i])
        else:
            queue_c.append(queue[i])
    return (queue_a, queue_b, queue_c)

def sum_diff(queue):
    sum_diff = 0
    for klient in queue:
        sum_diff += klient[2]
    return sum_diff

def q_with_max_diff(q_a, q_b, q_c):
    q_max = []
    if sum_diff(q_a) > sum_diff(q_max):
        q_max = q_a
    elif sum_diff(q_b) > sum_diff(q_max):
        q_max = q_b
    elif sum_diff(q_c) > sum_diff(q_max):
        q_max = q_c
    return q_max


def standard_office(queue):
    abce_office = [0, 0, 0, 0]
    live_queue = []
    t_wait_list = []
    for i in range(sum_diff(queue) // 3):

        if queue != []:
            if queue[0][1] == 0:
                live_queue.append(queue[0])
                queue.remove(queue[0])
            else:
                queue[0][1] -= 1

        """Podejście kolejnego klienta do okienka"""
        if live_queue != []:
            if abce_office[0] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'a':
                        abce_office[0] = live_queue[j][2]
                        t_wait_list.append(
                        live_queue[j][4])  # dodanie czasu oczekiwania klienta na podejście do okienka do listy
                        live_queue.remove(live_queue[j])
                        break
        if live_queue != []:
            if abce_office[1] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'b':
                        abce_office[1] = live_queue[j][2]
                        t_wait_list.append(live_queue[j][4])
                        live_queue.remove(live_queue[j])
                        break
        if live_queue != []:
            if abce_office[2] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'c':
                        abce_office[2] = live_queue[j][2]
                        t_wait_list.append(live_queue[j][4])
                        live_queue.remove(live_queue[j])
                        break
        if live_queue != []:
            if abce_office[3] == 0:
                abce_office[3] = live_queue[0][2]
                t_wait_list.append(live_queue[0][4])
                live_queue.remove(live_queue[0])


        #print(abce_office)
        #print(live_queue)
        """Trwanie obsługi klientów w okienkach"""
        for j in range(4):
            if abce_office[j] != 0:
                abce_office[j] -= 1

        for j in range(len(live_queue)):
            live_queue[j][4] += 1
    return t_wait_list



def upgraded_office(queue):
    abce_office = [0, 0, 0, 0]
    live_queue = []
    t_wait_list = []
    for i in range(sum_diff(queue) // 3):

        if queue != []:
            if queue[0][1] == 0:
                live_queue.append(queue[0])
                queue.remove(queue[0])
            else:
                queue[0][1] -= 1

        """Podejście kolejnego klienta do okienka"""
        if live_queue != []:
            if abce_office[0] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'a':
                        abce_office[0] = live_queue[j][2]
                        t_wait_list.append(
                            live_queue[j][4])  # dodanie czasu oczekiwania klienta na podejście do okienka do listy
                        live_queue.remove(live_queue[j])
                        break
        if live_queue != []:
            if abce_office[1] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'b':
                        abce_office[1] = live_queue[j][2]
                        t_wait_list.append(live_queue[j][4])
                        live_queue.remove(live_queue[j])
                        break
        if live_queue != []:
            if abce_office[2] == 0:
                for j in range(len(live_queue)):
                    if live_queue[j][3] == 'c':
                        abce_office[2] = live_queue[j][2]
                        t_wait_list.append(live_queue[j][4])
                        live_queue.remove(live_queue[j])
                        break
        """Podejście do okienka E według priorytetu"""
        if live_queue != []:
            if abce_office[3] == 0:
                q_a, q_b, q_c = seperate_by_type(live_queue)
                q_max = q_with_max_diff(q_a, q_b, q_c)

                abce_office[3] = q_max[0][2]
                t_wait_list.append(q_max[0][4])
                live_queue.remove(q_max[0])

        # print(abce_office)
        # print(live_queue)

        """Trwanie obsługi klientów w okienkach"""
        for j in range(4):
            if abce_office[j] != 0:
                abce_office[j] -= 1

        for j in range(len(live_queue)):
            live_queue[j][4] += 1
    return t_wait_list

def stats(wait_list):
    avr = sum(wait_list) / len(wait_list)
    return {'Average' : avr, 'MAX' : max(wait_list)}

#Queue = random_queue(WORKING_TIME, ISSUE_DIFFICALTY_RANGE, COME_IN_TIME_RANGE, ISSUE_TYPE_RANGE)
#print(Queue)
upgr_wait_list = upgraded_office([[1, 1, 13, 'c', 0], [2, 1, 15, 'b', 0], [3, 3, 6, 'c', 0], [4, 3, 8, 'a', 0], [5, 1, 15, 'a', 0], [6, 0, 15, 'b', 0], [7, 0, 9, 'b', 0], [8, 0, 9, 'a', 0], [9, 4, 5, 'c', 0], [10, 1, 11, 'a', 0], [11, 1, 6, 'a', 0], [12, 1, 6, 'a', 0], [13, 1, 9, 'a', 0], [14, 0, 12, 'b', 0], [15, 3, 15, 'a', 0], [16, 0, 5, 'b', 0], [17, 0, 6, 'a', 0], [18, 0, 13, 'a', 0], [19, 4, 10, 'c', 0], [20, 2, 14, 'a', 0], [21, 3, 5, 'c', 0], [22, 4, 6, 'a', 0], [23, 4, 7, 'a', 0], [24, 3, 12, 'a', 0], [25, 0, 7, 'a', 0], [26, 2, 12, 'b', 0], [27, 3, 6, 'c', 0], [28, 1, 5, 'b', 0], [29, 2, 8, 'b', 0], [30, 0, 5, 'c', 0], [31, 0, 11, 'b', 0], [32, 1, 5, 'a', 0], [33, 0, 10, 'b', 0], [34, 1, 8, 'c', 0], [35, 4, 14, 'b', 0], [36, 1, 13, 'c', 0], [37, 3, 6, 'c', 0], [38, 0, 13, 'b', 0], [39, 2, 5, 'a', 0], [40, 3, 5, 'a', 0], [41, 4, 8, 'a', 0], [42, 2, 5, 'b', 0], [43, 1, 13, 'a', 0], [44, 4, 15, 'a', 0], [45, 0, 14, 'a', 0], [46, 3, 15, 'c', 0], [47, 4, 14, 'b', 0], [48, 1, 9, 'c', 0], [49, 2, 6, 'c', 0], [50, 3, 10, 'b', 0], [51, 2, 13, 'c', 0], [52, 4, 11, 'b', 0], [53, 1, 10, 'c', 0], [54, 2, 8, 'b', 0], [55, 2, 9, 'a', 0], [56, 1, 7, 'c', 0], [57, 0, 13, 'c', 0], [58, 0, 6, 'b', 0], [59, 2, 7, 'a', 0], [60, 3, 11, 'b', 0], [61, 3, 5, 'b', 0], [62, 2, 13, 'a', 0], [63, 4, 15, 'b', 0], [64, 2, 9, 'b', 0], [65, 2, 11, 'c', 0], [66, 0, 8, 'b', 0], [67, 1, 6, 'c', 0], [68, 2, 13, 'a', 0], [69, 4, 8, 'b', 0], [70, 0, 9, 'c', 0], [71, 4, 6, 'a', 0], [72, 4, 11, 'c', 0], [73, 2, 14, 'b', 0], [74, 0, 5, 'c', 0], [75, 3, 5, 'c', 0], [76, 0, 8, 'b', 0], [77, 2, 9, 'a', 0], [78, 4, 7, 'c', 0], [79, 3, 9, 'c', 0], [80, 3, 15, 'b', 0], [81, 2, 14, 'a', 0], [82, 0, 5, 'b', 0], [83, 1, 14, 'b', 0], [84, 3, 6, 'b', 0], [85, 2, 11, 'b', 0], [86, 0, 9, 'a', 0], [87, 1, 7, 'a', 0], [88, 2, 11, 'a', 0], [89, 2, 13, 'a', 0], [90, 4, 14, 'c', 0], [91, 3, 7, 'b', 0], [92, 1, 15, 'a', 0], [93, 1, 15, 'b', 0], [94, 3, 5, 'a', 0], [95, 2, 5, 'b', 0], [96, 3, 8, 'b', 0], [97, 1, 15, 'a', 0], [98, 1, 9, 'a', 0], [99, 2, 12, 'c', 0], [100, 2, 14, 'a', 0], [101, 3, 5, 'a', 0], [102, 1, 7, 'a', 0], [103, 3, 15, 'a', 0], [104, 0, 7, 'b', 0], [105, 1, 7, 'c', 0], [106, 2, 9, 'b', 0], [107, 4, 11, 'a', 0], [108, 3, 13, 'a', 0], [109, 4, 11, 'b', 0], [110, 4, 15, 'c', 0], [111, 1, 10, 'a', 0], [112, 4, 7, 'b', 0], [113, 4, 13, 'b', 0], [114, 3, 11, 'b', 0], [115, 0, 7, 'a', 0], [116, 4, 8, 'a', 0], [117, 1, 11, 'a', 0], [118, 1, 7, 'c', 0], [119, 0, 13, 'c', 0], [120, 1, 11, 'c', 0], [121, 2, 9, 'a', 0], [122, 4, 6, 'c', 0], [123, 4, 12, 'a', 0], [124, 2, 9, 'a', 0], [125, 0, 8, 'c', 0], [126, 4, 6, 'c', 0], [127, 0, 8, 'a', 0], [128, 2, 8, 'a', 0], [129, 2, 13, 'c', 0], [130, 3, 13, 'c', 0], [131, 1, 7, 'a', 0], [132, 2, 6, 'a', 0], [133, 3, 14, 'c', 0], [134, 4, 14, 'a', 0], [135, 4, 14, 'b', 0], [136, 2, 8, 'b', 0], [137, 1, 8, 'a', 0], [138, 0, 9, 'b', 0], [139, 4, 13, 'c', 0], [140, 3, 14, 'a', 0], [141, 1, 7, 'a', 0], [142, 3, 9, 'c', 0], [143, 0, 12, 'b', 0], [144, 3, 8, 'c', 0], [145, 1, 10, 'b', 0], [146, 3, 8, 'b', 0], [147, 2, 11, 'c', 0], [148, 1, 5, 'c', 0], [149, 4, 12, 'c', 0], [150, 3, 14, 'a', 0], [151, 1, 8, 'a', 0], [152, 3, 15, 'b', 0], [153, 1, 8, 'c', 0], [154, 0, 6, 'b', 0], [155, 4, 11, 'a', 0], [156, 0, 13, 'b', 0], [157, 0, 6, 'a', 0], [158, 3, 8, 'a', 0], [159, 2, 13, 'b', 0], [160, 1, 11, 'b', 0], [161, 0, 9, 'c', 0], [162, 1, 10, 'c', 0], [163, 4, 9, 'b', 0], [164, 3, 12, 'a', 0], [165, 1, 13, 'a', 0], [166, 0, 6, 'b', 0], [167, 1, 15, 'c', 0], [168, 4, 10, 'a', 0], [169, 4, 13, 'c', 0], [170, 0, 11, 'c', 0], [171, 4, 6, 'a', 0], [172, 2, 10, 'a', 0], [173, 1, 9, 'b', 0], [174, 4, 12, 'b', 0], [175, 0, 6, 'c', 0], [176, 3, 10, 'b', 0], [177, 4, 12, 'b', 0], [178, 1, 15, 'a', 0], [179, 3, 10, 'b', 0], [180, 0, 12, 'b', 0], [181, 2, 9, 'c', 0], [182, 4, 6, 'b', 0], [183, 2, 6, 'c', 0], [184, 4, 6, 'a', 0], [185, 2, 5, 'a', 0], [186, 4, 5, 'c', 0], [187, 2, 6, 'a', 0], [188, 4, 14, 'a', 0], [189, 3, 11, 'a', 0], [190, 3, 12, 'b', 0], [191, 1, 11, 'b', 0], [192, 4, 12, 'a', 0], [193, 1, 10, 'b', 0], [194, 4, 6, 'a', 0], [195, 4, 7, 'b', 0], [196, 2, 11, 'b', 0], [197, 1, 5, 'a', 0], [198, 2, 9, 'c', 0], [199, 4, 14, 'a', 0], [200, 1, 8, 'a', 0], [201, 4, 5, 'c', 0], [202, 4, 7, 'b', 0], [203, 2, 8, 'b', 0], [204, 0, 6, 'c', 0], [205, 4, 13, 'a', 0], [206, 0, 12, 'a', 0], [207, 0, 6, 'c', 0], [208, 3, 11, 'a', 0], [209, 3, 13, 'a', 0], [210, 1, 15, 'a', 0], [211, 4, 8, 'a', 0], [212, 4, 12, 'c', 0], [213, 0, 9, 'b', 0], [214, 0, 9, 'a', 0], [215, 0, 10, 'a', 0], [216, 1, 8, 'b', 0], [217, 3, 5, 'c', 0], [218, 0, 13, 'b', 0], [219, 1, 14, 'b', 0], [220, 0, 8, 'b', 0], [221, 2, 13, 'c', 0], [222, 1, 14, 'b', 0], [223, 4, 8, 'c', 0], [224, 1, 6, 'b', 0], [225, 0, 15, 'a', 0], [226, 3, 11, 'a', 0], [227, 3, 5, 'c', 0], [228, 0, 15, 'a', 0], [229, 4, 13, 'a', 0], [230, 0, 15, 'c', 0], [231, 2, 9, 'b', 0], [232, 2, 8, 'c', 0], [233, 1, 5, 'c', 0], [234, 1, 12, 'a', 0], [235, 4, 9, 'a', 0], [236, 3, 5, 'b', 0], [237, 1, 7, 'a', 0], [238, 1, 11, 'c', 0], [239, 0, 15, 'a', 0], [240, 0, 12, 'a', 0], [241, 3, 7, 'b', 0], [242, 0, 15, 'a', 0], [243, 1, 5, 'b', 0], [244, 0, 14, 'b', 0], [245, 3, 9, 'b', 0], [246, 2, 7, 'b', 0], [247, 4, 9, 'b', 0], [248, 2, 15, 'a', 0], [249, 1, 9, 'a', 0], [250, 1, 13, 'c', 0], [251, 1, 8, 'b', 0], [252, 4, 6, 'b', 0], [253, 2, 14, 'a', 0], [254, 0, 6, 'c', 0], [255, 4, 5, 'b', 0], [256, 4, 7, 'c', 0], [257, 2, 8, 'a', 0], [258, 2, 8, 'a', 0], [259, 4, 14, 'c', 0], [260, 2, 13, 'a', 0], [261, 3, 5, 'c', 0], [262, 0, 5, 'b', 0], [263, 3, 13, 'b', 0], [264, 2, 10, 'b', 0], [265, 2, 10, 'b', 0], [266, 3, 6, 'c', 0], [267, 1, 6, 'a', 0], [268, 1, 7, 'a', 0], [269, 0, 5, 'a', 0], [270, 1, 6, 'c', 0], [271, 3, 7, 'c', 0], [272, 1, 12, 'a', 0], [273, 3, 7, 'c', 0], [274, 3, 5, 'b', 0], [275, 4, 15, 'c', 0], [276, 1, 10, 'a', 0], [277, 1, 14, 'a', 0], [278, 3, 13, 'a', 0], [279, 2, 9, 'a', 0], [280, 1, 13, 'a', 0], [281, 1, 15, 'a', 0], [282, 4, 10, 'a', 0], [283, 4, 10, 'c', 0], [284, 0, 6, 'a', 0], [285, 1, 6, 'b', 0], [286, 4, 13, 'c', 0], [287, 2, 12, 'c', 0], [288, 4, 11, 'a', 0], [289, 1, 11, 'b', 0], [290, 0, 14, 'c', 0], [291, 3, 6, 'b', 0], [292, 4, 14, 'b', 0], [293, 0, 11, 'c', 0], [294, 0, 14, 'b', 0], [295, 0, 6, 'c', 0], [296, 1, 15, 'b', 0], [297, 0, 6, 'b', 0], [298, 3, 11, 'b', 0], [299, 4, 10, 'b', 0], [300, 3, 15, 'b', 0], [301, 3, 10, 'a', 0], [302, 3, 12, 'c', 0], [303, 0, 13, 'b', 0], [304, 4, 7, 'b', 0]])
stand_wait_list = standard_office([[1, 1, 13, 'c', 0], [2, 1, 15, 'b', 0], [3, 3, 6, 'c', 0], [4, 3, 8, 'a', 0], [5, 1, 15, 'a', 0], [6, 0, 15, 'b', 0], [7, 0, 9, 'b', 0], [8, 0, 9, 'a', 0], [9, 4, 5, 'c', 0], [10, 1, 11, 'a', 0], [11, 1, 6, 'a', 0], [12, 1, 6, 'a', 0], [13, 1, 9, 'a', 0], [14, 0, 12, 'b', 0], [15, 3, 15, 'a', 0], [16, 0, 5, 'b', 0], [17, 0, 6, 'a', 0], [18, 0, 13, 'a', 0], [19, 4, 10, 'c', 0], [20, 2, 14, 'a', 0], [21, 3, 5, 'c', 0], [22, 4, 6, 'a', 0], [23, 4, 7, 'a', 0], [24, 3, 12, 'a', 0], [25, 0, 7, 'a', 0], [26, 2, 12, 'b', 0], [27, 3, 6, 'c', 0], [28, 1, 5, 'b', 0], [29, 2, 8, 'b', 0], [30, 0, 5, 'c', 0], [31, 0, 11, 'b', 0], [32, 1, 5, 'a', 0], [33, 0, 10, 'b', 0], [34, 1, 8, 'c', 0], [35, 4, 14, 'b', 0], [36, 1, 13, 'c', 0], [37, 3, 6, 'c', 0], [38, 0, 13, 'b', 0], [39, 2, 5, 'a', 0], [40, 3, 5, 'a', 0], [41, 4, 8, 'a', 0], [42, 2, 5, 'b', 0], [43, 1, 13, 'a', 0], [44, 4, 15, 'a', 0], [45, 0, 14, 'a', 0], [46, 3, 15, 'c', 0], [47, 4, 14, 'b', 0], [48, 1, 9, 'c', 0], [49, 2, 6, 'c', 0], [50, 3, 10, 'b', 0], [51, 2, 13, 'c', 0], [52, 4, 11, 'b', 0], [53, 1, 10, 'c', 0], [54, 2, 8, 'b', 0], [55, 2, 9, 'a', 0], [56, 1, 7, 'c', 0], [57, 0, 13, 'c', 0], [58, 0, 6, 'b', 0], [59, 2, 7, 'a', 0], [60, 3, 11, 'b', 0], [61, 3, 5, 'b', 0], [62, 2, 13, 'a', 0], [63, 4, 15, 'b', 0], [64, 2, 9, 'b', 0], [65, 2, 11, 'c', 0], [66, 0, 8, 'b', 0], [67, 1, 6, 'c', 0], [68, 2, 13, 'a', 0], [69, 4, 8, 'b', 0], [70, 0, 9, 'c', 0], [71, 4, 6, 'a', 0], [72, 4, 11, 'c', 0], [73, 2, 14, 'b', 0], [74, 0, 5, 'c', 0], [75, 3, 5, 'c', 0], [76, 0, 8, 'b', 0], [77, 2, 9, 'a', 0], [78, 4, 7, 'c', 0], [79, 3, 9, 'c', 0], [80, 3, 15, 'b', 0], [81, 2, 14, 'a', 0], [82, 0, 5, 'b', 0], [83, 1, 14, 'b', 0], [84, 3, 6, 'b', 0], [85, 2, 11, 'b', 0], [86, 0, 9, 'a', 0], [87, 1, 7, 'a', 0], [88, 2, 11, 'a', 0], [89, 2, 13, 'a', 0], [90, 4, 14, 'c', 0], [91, 3, 7, 'b', 0], [92, 1, 15, 'a', 0], [93, 1, 15, 'b', 0], [94, 3, 5, 'a', 0], [95, 2, 5, 'b', 0], [96, 3, 8, 'b', 0], [97, 1, 15, 'a', 0], [98, 1, 9, 'a', 0], [99, 2, 12, 'c', 0], [100, 2, 14, 'a', 0], [101, 3, 5, 'a', 0], [102, 1, 7, 'a', 0], [103, 3, 15, 'a', 0], [104, 0, 7, 'b', 0], [105, 1, 7, 'c', 0], [106, 2, 9, 'b', 0], [107, 4, 11, 'a', 0], [108, 3, 13, 'a', 0], [109, 4, 11, 'b', 0], [110, 4, 15, 'c', 0], [111, 1, 10, 'a', 0], [112, 4, 7, 'b', 0], [113, 4, 13, 'b', 0], [114, 3, 11, 'b', 0], [115, 0, 7, 'a', 0], [116, 4, 8, 'a', 0], [117, 1, 11, 'a', 0], [118, 1, 7, 'c', 0], [119, 0, 13, 'c', 0], [120, 1, 11, 'c', 0], [121, 2, 9, 'a', 0], [122, 4, 6, 'c', 0], [123, 4, 12, 'a', 0], [124, 2, 9, 'a', 0], [125, 0, 8, 'c', 0], [126, 4, 6, 'c', 0], [127, 0, 8, 'a', 0], [128, 2, 8, 'a', 0], [129, 2, 13, 'c', 0], [130, 3, 13, 'c', 0], [131, 1, 7, 'a', 0], [132, 2, 6, 'a', 0], [133, 3, 14, 'c', 0], [134, 4, 14, 'a', 0], [135, 4, 14, 'b', 0], [136, 2, 8, 'b', 0], [137, 1, 8, 'a', 0], [138, 0, 9, 'b', 0], [139, 4, 13, 'c', 0], [140, 3, 14, 'a', 0], [141, 1, 7, 'a', 0], [142, 3, 9, 'c', 0], [143, 0, 12, 'b', 0], [144, 3, 8, 'c', 0], [145, 1, 10, 'b', 0], [146, 3, 8, 'b', 0], [147, 2, 11, 'c', 0], [148, 1, 5, 'c', 0], [149, 4, 12, 'c', 0], [150, 3, 14, 'a', 0], [151, 1, 8, 'a', 0], [152, 3, 15, 'b', 0], [153, 1, 8, 'c', 0], [154, 0, 6, 'b', 0], [155, 4, 11, 'a', 0], [156, 0, 13, 'b', 0], [157, 0, 6, 'a', 0], [158, 3, 8, 'a', 0], [159, 2, 13, 'b', 0], [160, 1, 11, 'b', 0], [161, 0, 9, 'c', 0], [162, 1, 10, 'c', 0], [163, 4, 9, 'b', 0], [164, 3, 12, 'a', 0], [165, 1, 13, 'a', 0], [166, 0, 6, 'b', 0], [167, 1, 15, 'c', 0], [168, 4, 10, 'a', 0], [169, 4, 13, 'c', 0], [170, 0, 11, 'c', 0], [171, 4, 6, 'a', 0], [172, 2, 10, 'a', 0], [173, 1, 9, 'b', 0], [174, 4, 12, 'b', 0], [175, 0, 6, 'c', 0], [176, 3, 10, 'b', 0], [177, 4, 12, 'b', 0], [178, 1, 15, 'a', 0], [179, 3, 10, 'b', 0], [180, 0, 12, 'b', 0], [181, 2, 9, 'c', 0], [182, 4, 6, 'b', 0], [183, 2, 6, 'c', 0], [184, 4, 6, 'a', 0], [185, 2, 5, 'a', 0], [186, 4, 5, 'c', 0], [187, 2, 6, 'a', 0], [188, 4, 14, 'a', 0], [189, 3, 11, 'a', 0], [190, 3, 12, 'b', 0], [191, 1, 11, 'b', 0], [192, 4, 12, 'a', 0], [193, 1, 10, 'b', 0], [194, 4, 6, 'a', 0], [195, 4, 7, 'b', 0], [196, 2, 11, 'b', 0], [197, 1, 5, 'a', 0], [198, 2, 9, 'c', 0], [199, 4, 14, 'a', 0], [200, 1, 8, 'a', 0], [201, 4, 5, 'c', 0], [202, 4, 7, 'b', 0], [203, 2, 8, 'b', 0], [204, 0, 6, 'c', 0], [205, 4, 13, 'a', 0], [206, 0, 12, 'a', 0], [207, 0, 6, 'c', 0], [208, 3, 11, 'a', 0], [209, 3, 13, 'a', 0], [210, 1, 15, 'a', 0], [211, 4, 8, 'a', 0], [212, 4, 12, 'c', 0], [213, 0, 9, 'b', 0], [214, 0, 9, 'a', 0], [215, 0, 10, 'a', 0], [216, 1, 8, 'b', 0], [217, 3, 5, 'c', 0], [218, 0, 13, 'b', 0], [219, 1, 14, 'b', 0], [220, 0, 8, 'b', 0], [221, 2, 13, 'c', 0], [222, 1, 14, 'b', 0], [223, 4, 8, 'c', 0], [224, 1, 6, 'b', 0], [225, 0, 15, 'a', 0], [226, 3, 11, 'a', 0], [227, 3, 5, 'c', 0], [228, 0, 15, 'a', 0], [229, 4, 13, 'a', 0], [230, 0, 15, 'c', 0], [231, 2, 9, 'b', 0], [232, 2, 8, 'c', 0], [233, 1, 5, 'c', 0], [234, 1, 12, 'a', 0], [235, 4, 9, 'a', 0], [236, 3, 5, 'b', 0], [237, 1, 7, 'a', 0], [238, 1, 11, 'c', 0], [239, 0, 15, 'a', 0], [240, 0, 12, 'a', 0], [241, 3, 7, 'b', 0], [242, 0, 15, 'a', 0], [243, 1, 5, 'b', 0], [244, 0, 14, 'b', 0], [245, 3, 9, 'b', 0], [246, 2, 7, 'b', 0], [247, 4, 9, 'b', 0], [248, 2, 15, 'a', 0], [249, 1, 9, 'a', 0], [250, 1, 13, 'c', 0], [251, 1, 8, 'b', 0], [252, 4, 6, 'b', 0], [253, 2, 14, 'a', 0], [254, 0, 6, 'c', 0], [255, 4, 5, 'b', 0], [256, 4, 7, 'c', 0], [257, 2, 8, 'a', 0], [258, 2, 8, 'a', 0], [259, 4, 14, 'c', 0], [260, 2, 13, 'a', 0], [261, 3, 5, 'c', 0], [262, 0, 5, 'b', 0], [263, 3, 13, 'b', 0], [264, 2, 10, 'b', 0], [265, 2, 10, 'b', 0], [266, 3, 6, 'c', 0], [267, 1, 6, 'a', 0], [268, 1, 7, 'a', 0], [269, 0, 5, 'a', 0], [270, 1, 6, 'c', 0], [271, 3, 7, 'c', 0], [272, 1, 12, 'a', 0], [273, 3, 7, 'c', 0], [274, 3, 5, 'b', 0], [275, 4, 15, 'c', 0], [276, 1, 10, 'a', 0], [277, 1, 14, 'a', 0], [278, 3, 13, 'a', 0], [279, 2, 9, 'a', 0], [280, 1, 13, 'a', 0], [281, 1, 15, 'a', 0], [282, 4, 10, 'a', 0], [283, 4, 10, 'c', 0], [284, 0, 6, 'a', 0], [285, 1, 6, 'b', 0], [286, 4, 13, 'c', 0], [287, 2, 12, 'c', 0], [288, 4, 11, 'a', 0], [289, 1, 11, 'b', 0], [290, 0, 14, 'c', 0], [291, 3, 6, 'b', 0], [292, 4, 14, 'b', 0], [293, 0, 11, 'c', 0], [294, 0, 14, 'b', 0], [295, 0, 6, 'c', 0], [296, 1, 15, 'b', 0], [297, 0, 6, 'b', 0], [298, 3, 11, 'b', 0], [299, 4, 10, 'b', 0], [300, 3, 15, 'b', 0], [301, 3, 10, 'a', 0], [302, 3, 12, 'c', 0], [303, 0, 13, 'b', 0], [304, 4, 7, 'b', 0]])

print('Standard office', stats(stand_wait_list))
print('Upgraded office', stats(upgr_wait_list))
